#include "stm32f4xx.h"
#include <stdint.h>

#define GPIOAEN     (1U<<0)
#define PA2MOD      (2U<<4)
#define PA2AF       (7U<<8)
#define APB1EN      (1U<<17)
#define USART2EN    (1U<<13)
#define SR_TXE      (1U<<7)

#define SYS_FREQ        16000000
#define APB1_CLK        SYS_FREQ
#define UART_BAUDRATE   115200

void uart2_init(void);
void uart2_write(char ch);
void uart2_write_string(const char *str);

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

int main()
{
    uart2_init();

    const char *message = "yuvaraj\n\r";

    while(1)
    {
        uart2_write_string(message);
    }
    return 0;
}

void uart2_write_string(const char *str)
{
    // Iterate through each character in the string and send it
    while (*str != '\0')
    {
        uart2_write(*str++);
    }
}

void uart2_init(void)
{
    // Enable clock access to GPIOA
    RCC->AHB1ENR |= GPIOAEN;

    // Set PA2 mode to alternate function mode
    GPIOA->MODER |= PA2MOD;

    // Set PA2 alternate function type to UART_TX (AF07)
    GPIOA->AFR[0] |= PA2AF;

    // Enable clock access to USART2
    RCC->APB1ENR |= APB1EN;

    // Configure baud rate
    uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);

    // Configure the transfer direction and enable USART2
    USART2->CR1 |= USART_CR1_TE | USART2EN;
}

void uart2_write(char ch)
{
    // Wait until the transmit data register is empty
    while (!(USART2->SR & SR_TXE)) {}

    // Write to transmit data register
    USART2->DR = ch;
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
    USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
}

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
    return ((PeriphClk + (BaudRate / 2U)) / BaudRate);
}
